// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package models

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type userQuizTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *userQuizTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("user_quiz").
func (v *userQuizTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *userQuizTableType) Columns() []string {
	return []string{
		"id",
		"user_id",
		"quiz_id",
		"score",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *userQuizTableType) NewStruct() reform.Struct {
	return new(UserQuiz)
}

// NewRecord makes a new record for that table.
func (v *userQuizTableType) NewRecord() reform.Record {
	return new(UserQuiz)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *userQuizTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// UserQuizTable represents user_quiz view or table in SQL database.
var UserQuizTable = &userQuizTableType{
	s: parse.StructInfo{
		Type:    "UserQuiz",
		SQLName: "user_quiz",
		Fields: []parse.FieldInfo{
			{Name: "ID", Type: "int32", Column: "id"},
			{Name: "UserID", Type: "*int32", Column: "user_id"},
			{Name: "QuizID", Type: "*int32", Column: "quiz_id"},
			{Name: "Score", Type: "int32", Column: "score"},
		},
		PKFieldIndex: 0,
	},
	z: new(UserQuiz).Values(),
}

// String returns a string representation of this struct or record.
func (s UserQuiz) String() string {
	res := make([]string, 4)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "UserID: " + reform.Inspect(s.UserID, true)
	res[2] = "QuizID: " + reform.Inspect(s.QuizID, true)
	res[3] = "Score: " + reform.Inspect(s.Score, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *UserQuiz) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.UserID,
		s.QuizID,
		s.Score,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *UserQuiz) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.UserID,
		&s.QuizID,
		&s.Score,
	}
}

// View returns View object for that struct.
func (s *UserQuiz) View() reform.View {
	return UserQuizTable
}

// Table returns Table object for that record.
func (s *UserQuiz) Table() reform.Table {
	return UserQuizTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *UserQuiz) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *UserQuiz) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *UserQuiz) HasPK() bool {
	return s.ID != UserQuizTable.z[UserQuizTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.ID = pk.
func (s *UserQuiz) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = UserQuizTable
	_ reform.Struct = (*UserQuiz)(nil)
	_ reform.Table  = UserQuizTable
	_ reform.Record = (*UserQuiz)(nil)
	_ fmt.Stringer  = (*UserQuiz)(nil)
)

func init() {
	parse.AssertUpToDate(&UserQuizTable.s, new(UserQuiz))
}
